
  The program 'TestSelection' is a Boost.test module containing unit tests.

  Usage
    TestSelection [Boost.Test argument]... [-- [custom test module argument]...]

  Use
      TestSelection --help
  or  TestSelection --help=<parameter name>
  for detailed help on Boost.Test parameters.


  Command line flags:
   The command line flags of Boost.Test are listed below. All parameters are
   optional. You can specify parameter value either as a command line argument or
   as a value of its corresponding environment variable. If a flag is specified as
   a command line argument and an environment variable at the same time, the
   command line takes precedence. The command line argument support name guessing,
   and works with shorter names as long as those are not ambiguous.

   All the arguments after the '--' are ignored by Boost.Test.

  Environment variables:
   Every argument listed below may also be set by a corresponding
   environmentvariable. For an argument '--argument_x=<value>', the corresponding
   environment variable is 'BOOST_TEST_ARGUMENT_X=value

  The following parameters are supported:

  auto_start_dbg
    Automatically attaches debugger in case of system level failure (signal).
    --auto_start_dbg[=<boolean value>]
    -d[ <boolean value>]

  break_exec_path
    For the exception safety testing allows to break at specific execution path.
    --break_exec_path=<value>

  build_info
    Displays library build information.
    --build_info[=<boolean value>]
    -i[ <boolean value>]

  catch_system_errors
    Allows to switch between catching and ignoring system errors (signals).
    --[no_]catch_system_errors[=<boolean value>]
    -s[ <boolean value>]

  color_output
    Enables color output of the framework log and report messages.
    --[no_]color_output[=<boolean value>]
    -x[ <boolean value>]

  detect_fp_exceptions
    Enables/disables floating point exceptions traps.
    --[no_]detect_fp_exceptions[=<boolean value>]

  detect_memory_leaks
    Turns on/off memory leaks detection (optionally breaking on specified alloc
    order number).
    --detect_memory_leaks[=<alloc order number>]

  help
    Help for framework parameters.
    --help[=<parameter name>]

  list_content
    Lists the content of test tree - names of all test suites and test cases.
    --list_content[=<HRF|DOT>]

  list_labels
    Lists all available labels.
    --list_labels[=<boolean value>]

  log_format
    Specifies log format.
    --log_format=<HRF|CLF|XML|JUNIT>
    -f <HRF|CLF|XML|JUNIT>

  log_level
    Specifies the logging level of the test execution.
    --log_level=<all|success|test_suite|unit_scope|message|warning|error|cpp_exception|system_error|fatal_error|nothing>
    -l <all|success|test_suite|unit_scope|message|warning|error|cpp_exception|system_error|fatal_error|nothing>

  log_sink
    Specifies log sink: stdout (default), stderr or file name.
    --log_sink=<stderr|stdout|file name>
    -k <stderr|stdout|file name>

  logger
    Specifies log level and sink for one or several log format
    --logger=log_format,log_level,log_sink[:log_format,log_level,log_sink]

  output_format
    Specifies output format (both log and report).
    --output_format=<HRF|CLF|XML>
    -o <HRF|CLF|XML>

  random
    Allows to switch between sequential and random order of test units execution.
    Optionally allows to specify concrete seed for random number generator.
    --random[=<seed>]

  report_format
    Specifies the test report format.
    --report_format=<HRF|CLF|XML>
    -m <HRF|CLF|XML>

  report_level
    Specifies test report level.
    --report_level=<confirm|short|detailed|no>
    -r <confirm|short|detailed|no>

  report_memory_leaks_to
    File where to report memory leaks to.
    --report_memory_leaks_to=<file name>

  report_sink
    Specifies report sink: stderr(default), stdout or file name.
    --report_sink=<stderr|stdout|file name>
    -e <stderr|stdout|file name>

  result_code
    Disables test modules's result code generation.
    --[no_]result_code[=<boolean value>]
    -c[ <boolean value>]

  run_test
    Filters which tests to execute.
    --run_test=<test unit filter>
    -t <test unit filter>

  save_pattern
    Allows to switch between saving or matching test pattern file.
    --save_pattern[=<boolean value>]

  show_progress
    Turns on progress display.
    --show_progress[=<boolean value>]
    -p[ <boolean value>]

  usage
    Short message explaining usage of Boost.Test parameters.
    -?[ <boolean value>]

  use_alt_stack
    Turns on/off usage of an alternative stack for signal handling.
    --[no_]use_alt_stack[=<boolean value>]

  version
    Prints Boost.Test version and exits.
    --version[ <boolean value>]

  wait_for_debugger
    Forces test module to wait for button to be pressed before starting test run.
    --wait_for_debugger[=<boolean value>]
    -w[ <boolean value>]
